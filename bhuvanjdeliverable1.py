# -*- coding: utf-8 -*-
"""BhuvanJDeliverable1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XQSNLpfFg7gwiNxHQqrCiB_yZf7ImyDN
"""

!pip install yfinance --upgrade --no-cache-dir
!pip install ta

import yfinance as yf
import numpy as np
import ta
import pandas as pd
import matplotlib.pyplot as plt 
import plotly.graph_objs as plty
from datetime import datetime

"""- Indicators Used + Definitions:
- MACD
- Stochastic
- Moving averages (12 and 26)
- RSI
- Defining time steps (3):
- Defining Lags (14):
- Defining < 20 for stochastics:

"""

def createFrame(name, start):
  df = yf.download(name, start, interval='1h')
  #fast stochastic --> 
  day = np.arange(1, len(df) + 1)
  df['Day'] = day
  df['%K'] = ta.momentum.stoch(df.High, df.Low, df.Close, window=14, smooth_window=3)
  #slow stochastic --> 3 period simple moving average 
  #mean of 3 time steps 
  df['%D'] = df['%K'].rolling(3).mean()
  df['RSI'] = ta.momentum.rsi(df.Close, window=14)
  #Difference between the MACD and signal line 
  df['MACD'] = ta.trend.macd_diff(df.Close)
  df['Middle Band'] = df['Close'].rolling(window=20).mean()
  df['Upper Band'] = df['Middle Band'] + 1.96 * df['Close'].rolling(window=21).std()
  df['Lower Band'] = df['Middle Band'] - 1.96 * df['Close'].rolling(window=21).std()
  df['12-day MA'] = df['Close'].rolling(12).mean()
  df['26-day MA'] = df['Close'].rolling(26).mean()

  df.dropna(inplace=True)
  return df

def buyDates(df):

    #lags --> number of timesteps that you want to go back
    #Make global     
    lags  = 14
   
    #Crossings of the K and D lines 
    #Temp data frame
    dfx = pd.DataFrame()
    for i in range(1,lags+1):
        #make 20 global
        mask = (df['%K'].shift(i) < 20) & (df['%D'].shift(i) < 20)   
        dfx = dfx.append(mask, ignore_index=True) 
        
    #if the vertical sum of this dataframe is above 0 then there was a cross which indicates a buying trigger 

    #If buy then 1 else value is 0 
    df['stochBuy'] = np.where(dfx.sum(axis=0), 1, 0)
    #Explain why stochastic is between 20 and 80
    df['Buy'] = np.where((df.stochBuy) & (df['%K'].between(20,80)) & (df['%D'].between(20,80)) & (df['RSI'] >= 50) & (df['RSI'] <= 70) 
                        & (df.MACD > 0) & (df['12-day MA'] > df['26-day MA']), 1, 0)

    #Loads the buy signals with the necessary dates
    buyingDates = []
    for i in range(len(df) - 1):
    #Buy column in each row contains buy signal
        if df.Buy.iloc[i]:
            #forwarding looking bias without the +1 
            # +1 allows to buy in the time stamp in which indicator is being evaluated
            buyingDates.append(df.iloc[i + 1].name)

    
    return df, buyingDates

def plotter(df,buyingDates, startDate):
 
  fig = plty.Figure()
  fig.add_trace(plty.Scatter(mode='markers',x=buyingDates, y=df.Open[buyingDates], 
                             marker=dict(color='light green',
            size=14, line=dict(color='green',width=1)), showlegend=True, name='Buy Points')) 
  

  fig.add_trace(plty.Scatter(x=df.index, y=df['Open'], line=dict(color='lightblue', smoothing=1.3, width=1.5), name='Price'))

  fig.add_trace(plty.Candlestick(x = df.index, open=df['Open'],high=df['High'], low=df['Low'],
                              close=df['Close'], name='Candle Sticks'))

  fig.update_layout(
    width=1000,
    height=800,
    title = name + " Chart",
    xaxis_title ='Time (Weeks since ' + startDate + ")",
    yaxis_title = name + ' Share Price (USD)'
  )

  fig.show()

name =  input("Provide a stock name: "  )
date = input("Provide a start date (with this format YYYY-MM-DD): ")

df = createFrame(name, date)
df, buyingDates = buyDates(df)

if  df.Open[buyingDates].empty:
  print("No buy dates for " + name + " between " + date + " to now.")
  plotter(df, buyingDates, date)
else:
    plotter(df, buyingDates, date)
    rv = df.Open[buyingDates]
    print("Buying Dates: Price")
    print(rv)

